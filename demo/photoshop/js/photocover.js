var DEFAULT_OPTIONS = {
    RADIUS: 20,
    MAX_WIDTH: 800,
    COLOR: 'black',
    MOUSE: 'pen',
    PEN_BORDER_COLOR: 'red',
    ERASER_BORDER_COLOR: '#666',
    PEN: 'pen',
    ERASER: 'eraser',
    LINECAP: 'round'
};
var PhotoCover = (function () {
    function PhotoCover(selector) {
        this.win = window;
        this.doc = document;
        this.body = document.body;
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.radius = DEFAULT_OPTIONS.RADIUS; // radius of each circle of line
        this.maxWidth = DEFAULT_OPTIONS.MAX_WIDTH;
        this.color = DEFAULT_OPTIONS.COLOR; // draw color
        this.linecap = DEFAULT_OPTIONS.LINECAP; // 
        this.mouseType = DEFAULT_OPTIONS.MOUSE;
        this.isMobile = navigator.userAgent.indexOf('iPhone') > -1 || navigator.userAgent.indexOf('Android') > -1;
        this.operateHistories = [];
        this.registeredEvents = [];
        if (typeof selector === 'object') {
            this.img = selector;
        }
        else if (typeof selector === 'string') {
            this.img = document.querySelector(selector);
        }
        // initial canvas and its size and position
        this.width = this.img.width;
        this.height = this.img.height;
        this._init();
    }
    PhotoCover.prototype._init = function () {
        var _this = this;
        var _a = [this.body, this.win, this.img], body = _a[0], win = _a[1], img = _a[2];
        this._async();
        this.canvas.width = img.width;
        this.canvas.height = img.height;
        body.appendChild(this.canvas);
        if (!this.isMobile) {
            this._initMouse();
        }
        // async canvas position and size during browser resize
        var resize = (function (e) {
            _this._async();
        }).bind(this);
        win.addEventListener('resize', resize, false);
        this._pushRegisteredEvents(win, 'resize', resize);
        var currentOperate = [];
        var canvasMouseDown = (function (e) {
            e.preventDefault();
            var _a = _this.getCoordinateByEvent(e), x = _a[0], y = _a[1];
            _this.ctx.moveTo(x, y);
            currentOperate = [];
            if (_this.isOnCanvas(x, y, true)) {
                _this.ctx.beginPath();
                currentOperate.push(['MOVE_TO', x, y]);
                if (!_this.isMobile) {
                    win.addEventListener('mousemove', canvasMouseMove, false);
                }
                else {
                    win.addEventListener('touchmove', canvasMouseMove, false);
                }
            }
        }).bind(this);
        var canvasMouseMove = (function (e) {
            e.preventDefault();
            currentOperate.push(_this.drawByEvent(e));
        }).bind(this);
        var canvasMouseUp = (function (e) {
            e.preventDefault();
            if (!_this.isMobile) {
                win.removeEventListener('mousemove', canvasMouseMove, false);
            }
            else {
                win.removeEventListener('touchmove', canvasMouseMove, false);
            }
            var coordinate = _this.getCoordinateByEvent(e);
            var _a = [e.pageX, e.pageY], x = _a[0], y = _a[1];
            if (_this.isOnCanvas(x, y)) {
                _this.operateHistories.push(currentOperate);
                currentOperate = [];
                console.log(_this.operateHistories);
            }
        }).bind(this);
        // canvas down
        if (!this.isMobile) {
            win.addEventListener('mousedown', canvasMouseDown, false);
            this._pushRegisteredEvents(win, 'mousedown', canvasMouseDown);
            win.addEventListener('mouseup', canvasMouseUp, false);
            this._pushRegisteredEvents(win, 'mouseup', canvasMouseUp);
        }
        else {
            win.addEventListener('touchstart', canvasMouseDown, false);
            this._pushRegisteredEvents(win, 'touchstart', canvasMouseDown);
            win.addEventListener('touchend', canvasMouseUp, false);
            this._pushRegisteredEvents(win, 'touchend', canvasMouseUp);
        }
    };
    // async x and y from image to canvas
    PhotoCover.prototype._async = function () {
        var coordinate = this.img.getBoundingClientRect();
        this.top = coordinate.top;
        this.left = coordinate.left;
        this.canvas.style.cssText = "\n      position: absolute;\n      left: " + (this.left + this.body.scrollLeft) + "px;\n      top: " + (this.top + this.body.scrollTop) + "px;\n      use-select: none;\n    ";
    };
    /**
     * save binds events
     * @param  {DOM} _element  DOM that you bind event
     * @param  {String} _event  event name
     * @param  {Function} _function event function
     * @return {Boolean} true when save success
     */
    PhotoCover.prototype._pushRegisteredEvents = function (_element, _event, _function) {
        this.registeredEvents.push({
            'element': _element,
            'event': _event,
            'function': _function
        });
        return true;
    };
    // initial mouse shape where mouse on canvas
    PhotoCover.prototype._initMouse = function (type) {
        var _this = this;
        var _a = [this.body, this.win], body = _a[0], win = _a[1];
        var mouse = document.createElement('div');
        mouse.style.cssText = "\n      display: none;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 10001;\n      width: " + this.radius * 2 + "px;\n      height: " + this.radius * 2 + "px;\n      border: 1px solid red;\n      border-radius: 100%;\n    ";
        this.mouse = mouse;
        body.appendChild(mouse);
        var mouseMove = (function (e) {
            var _a = [e.pageX, e.pageY], x = _a[0], y = _a[1];
            var isOnCanvas = _this.isOnCanvas(x, y);
            mouse.style.transform = "translate(" + (x - _this.radius) + "px, " + (y - _this.radius) + "px)";
            if (!isOnCanvas) {
                mouse.style.display = 'none';
                body.style.cursor = 'default';
            }
            else {
                mouse.style.display = 'block';
                body.style.cursor = 'none';
            }
        }).bind(this);
        // change mouse style
        if (!this.isMobile) {
            win.addEventListener('mousemove', mouseMove, false);
            this._pushRegisteredEvents(win, 'mousemove', mouseMove);
        }
        else {
            win.addEventListener('touchmove', mouseMove, false);
            this._pushRegisteredEvents(win, 'touchmove', mouseMove);
        }
    };
    PhotoCover.prototype.setRadius = function (radius) {
        if (radius < 2 || radius > 100) {
            return;
        }
        var mouse = this.mouse;
        this.radius = radius;
        mouse.style.width = radius * 2 + 'px';
        mouse.style.height = radius * 2 + 'px';
    };
    PhotoCover.prototype.zoomIn = function (radius) {
        if (radius === void 0) { radius = 2; }
        this.setRadius(this.radius + radius);
    };
    PhotoCover.prototype.zoomOut = function (radius) {
        if (radius === void 0) { radius = 2; }
        this.setRadius(this.radius - radius);
    };
    PhotoCover.prototype.drawCircle = function (x, y, radius) {
        var ctx = this.ctx;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(x + 1, y + 1, radius || this.radius, 0, 360);
        ctx.fill();
        ctx.closePath();
    };
    PhotoCover.prototype.drawLine = function (x, y, radius) {
        var ctx = this.ctx;
        ctx.lineCap = this.linecap;
        ctx.lineJoin = 'round';
        ctx.strokeStyle = this.color;
        ctx.lineWidth = (radius || this.radius) * 2;
        ctx.lineTo(x, y);
        ctx.stroke();
    };
    PhotoCover.prototype.getCoordinateByEvent = function (event) {
        var x, y;
        var _a = [this.doc, this.body], doc = _a[0], body = _a[1];
        var canvas = this.canvas;
        if (this.isMobile) {
            event = event.changedTouches[0];
        }
        if (event.pageX || event.pageY) {
            x = event.pageX;
            y = event.pageY;
        }
        else {
            x = event.clientX + body.scrollLeft + doc.documentElement.scrollLeft;
            y = event.clientY + body.scrollTop + doc.documentElement.scrollTop;
        }
        x -= canvas.offsetLeft;
        y -= canvas.offsetTop;
        return [x, y];
    };
    PhotoCover.prototype.drawByEvent = function (event) {
        var ctx = this.ctx;
        var _a = this.getCoordinateByEvent(event), x = _a[0], y = _a[1];
        if (this.mouseType === DEFAULT_OPTIONS.PEN) {
            this.drawLine(x, y);
            return [DEFAULT_OPTIONS.PEN, this.color, x, y, this.radius];
        }
        else if (this.mouseType === DEFAULT_OPTIONS.ERASER) {
            x -= this.radius;
            y -= this.radius;
            var _b = [this.radius * 2, this.radius * 2], w = _b[0], h = _b[1];
            ctx.clearRect(x, y, w, h);
            return [DEFAULT_OPTIONS.ERASER, x, y, w, h];
        }
        else {
            return [];
        }
    };
    PhotoCover.prototype.isOnCanvas = function (x, y, isRelative) {
        if (isRelative === void 0) { isRelative = false; }
        var body = this.body;
        var scrollTop = body.scrollTop;
        if (isRelative) {
            if (x < 0 || x > this.width || y < 0 || y > this.height) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            if (x < this.left || x > (this.left + this.width) || y < (scrollTop + this.top) || y > (scrollTop + this.top + this.height)) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    PhotoCover.prototype.setMaxWidth = function (width) {
        this.maxWidth = width;
    };
    PhotoCover.prototype.setColor = function (color) {
        this.color = color;
    };
    // pen, eraser
    PhotoCover.prototype.setTool = function (tool) {
        this.mouseType = tool;
        if (tool.toLowerCase() === DEFAULT_OPTIONS.PEN) {
            this.setPen();
        }
        else if (tool.toLowerCase() === DEFAULT_OPTIONS.ERASER) {
            this.setEraser();
        }
    };
    PhotoCover.prototype.setPen = function () {
        Object.assign(this.mouse.style, {
            borderRadius: '100%',
            border: "1px solid " + DEFAULT_OPTIONS.PEN_BORDER_COLOR
        });
        this.mouseType = DEFAULT_OPTIONS.PEN;
    };
    PhotoCover.prototype.setEraser = function () {
        Object.assign(this.mouse.style, {
            borderRadius: 0,
            border: "1px dashed " + DEFAULT_OPTIONS.ERASER_BORDER_COLOR
        });
        this.mouseType = DEFAULT_OPTIONS.ERASER;
    };
    PhotoCover.prototype.undo = function () {
        var _this = this;
        var ctx = this.ctx;
        var color = this.color;
        ctx.save();
        ctx.clearRect(0, 0, this.width, this.height);
        this.operateHistories.pop();
        this.operateHistories.map(function (steps) {
            steps.map(function (step) {
                if (step[0] === DEFAULT_OPTIONS.PEN) {
                    _this.color = step[1];
                    _this.drawLine(step[2], step[3], step[4]);
                }
                else if (step[0] === DEFAULT_OPTIONS.ERASER) {
                    ctx.clearRect.apply(ctx, step.slice(1));
                }
                else if (step[0] === 'MOVE_TO') {
                    ctx.beginPath();
                    ctx.moveTo.apply(ctx, step.slice(1));
                }
            });
        });
        console.log(this.operateHistories.length);
        this.color = color;
        ctx.restore();
    };
    /**
     * get image origin size
     * @param  {String}   src      iamge source url
     * @param  {Function} callback callback function, width as first parameter and height as second
     * @return {undefined}
     */
    PhotoCover.prototype.getImageOriginSize = function (src, callback) {
        var img = new Image();
        img.onload = function () {
            var width = img.width;
            var height = img.height;
            callback && callback(width, height);
        };
        img.src = src;
    };
    PhotoCover.prototype.getDataURL = function (type, quality, callback) {
        var _this = this;
        if (type === void 0) { type = 'image/jpeg'; }
        if (quality === void 0) { quality = 0.8; }
        var src = this.img.src;
        this.getImageOriginSize(src, function (width, height) {
            var tempCanvas = document.createElement('canvas');
            tempCanvas.width = width;
            tempCanvas.height = height;
            var tempCtx = tempCanvas.getContext('2d');
            if (tempCtx) {
                tempCtx.drawImage(_this.img, 0, 0, width, height);
                tempCtx.drawImage(_this.canvas, 0, 0, width, height);
                callback && callback(tempCanvas.toDataURL(type, quality));
            }
        });
    };
    /**
     * remove dom that added into body,
     * remove all events that registered
     * @return {undefined}
     */
    PhotoCover.prototype.destroy = function () {
        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
        this.mouse.parentNode && this.mouse.parentNode.removeChild(this.mouse);
        this.img.src = '';
        this.registeredEvents.forEach(function (v) {
            v.element.removeEventListener(v.event, v["function"], false);
        });
        // delete this
    };
    return PhotoCover;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
