var MouseType;
(function (MouseType) {
    MouseType[MouseType["PEN"] = 0] = "PEN";
    MouseType[MouseType["ERASER"] = 1] = "ERASER";
})(MouseType || (MouseType = {}));
var PhotoCover = (function () {
    function PhotoCover(selector) {
        this.isMobile = navigator.userAgent.indexOf('iPhone') > -1 || navigator.userAgent.indexOf('Android') > -1;
        // cache window, document and body for speed up performance
        this.win = window;
        this.doc = document;
        this.body = document.body;
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        // init value
        this.mouseType = MouseType.PEN; // default mouse pointer
        this.radius = PhotoCover.DEFAULT_RADIUS; // default radius of pen
        this.maxWidth = PhotoCover.DEFAULT_MAX_WIDTH; // default max width of image
        this.color = PhotoCover.DEFAULT_COLOR; // default color of canvas
        this.lineCap = PhotoCover.DEFAULT_LINECAP; // default linecap of line on canvas
        this.lineJoin = PhotoCover.DEFAULT_LINEJOIN; // default lineJoin of line on canvas
        this.histories = []; // operate history
        this.bindedEvents = []; // registered events [node, type, function]
        if (typeof selector === 'object') {
            this.img = selector;
        }
        else if (typeof selector === 'string') {
            this.img = document.querySelector(selector);
        }
        // initial canvas and its size and position
        this.canvas.width = this.img.width;
        this.canvas.height = this.img.height;
        this.init();
    }
    PhotoCover.prototype.init = function () {
        var _this = this;
        var _a = [this.body, this.win], body = _a[0], win = _a[1];
        this.async();
        body.appendChild(this.canvas);
        if (!this.isMobile) {
            this.initMouse();
        }
        // async canvas position and size during browser resize
        var resize = (function () {
            _this.async();
        }).bind(this);
        win.addEventListener('resize', resize, false);
        this.bindedEvents.push([win, 'resize', resize]);
        var currentOperate = [];
        var canvasMouseDown = (function (e) {
            e.preventDefault();
            var _a = _this.getCoordinateByEvent(e), x = _a[0], y = _a[1];
            currentOperate = [];
            if (_this.isOnCanvas(e.pageX, e.pageY)) {
                _this.ctx.beginPath();
                currentOperate.push(['MOVE_TO', x, y]);
                currentOperate.push(_this.drawByEvent(e));
                _this.ctx.beginPath();
                currentOperate.push(['MOVE_TO', x, y]);
                if (!_this.isMobile) {
                    win.addEventListener('mousemove', canvasMouseMove, false);
                }
                else {
                    win.addEventListener('touchmove', canvasMouseMove, false);
                }
            }
        }).bind(this);
        var canvasMouseMove = (function (e) {
            e.preventDefault();
            currentOperate.push(_this.drawByEvent(e));
        }).bind(this);
        var canvasMouseUp = (function (e) {
            e.preventDefault();
            if (!_this.isMobile) {
                win.removeEventListener('mousemove', canvasMouseMove, false);
            }
            else {
                win.removeEventListener('touchmove', canvasMouseMove, false);
            }
            var _a = [e.pageX, e.pageY], x = _a[0], y = _a[1];
            if (_this.isOnCanvas(x, y)) {
                _this.histories.push(currentOperate);
                currentOperate = [];
            }
        }).bind(this);
        // canvas down
        if (!this.isMobile) {
            win.addEventListener('mousedown', canvasMouseDown, false);
            this.bindedEvents.push([win, 'mousedown', canvasMouseDown]);
            win.addEventListener('mouseup', canvasMouseUp, false);
            this.bindedEvents.push([win, 'mouseup', canvasMouseUp]);
        }
        else {
            win.addEventListener('touchstart', canvasMouseDown, false);
            this.bindedEvents.push([win, 'touchstart', canvasMouseDown]);
            win.addEventListener('touchend', canvasMouseUp, false);
            this.bindedEvents.push([win, 'touchend', canvasMouseUp]);
        }
    };
    // async x and y from image to canvas
    PhotoCover.prototype.async = function () {
        this.canvas.style.cssText = "\n      position: absolute;\n      left: " + this.img.offsetLeft + "px;\n      top: " + this.img.offsetTop + "px;\n      use-select: none;\n    ";
    };
    // initial mouse shape where mouse on canvas
    PhotoCover.prototype.initMouse = function () {
        var _this = this;
        var _a = [this.body, this.win], body = _a[0], win = _a[1];
        var mouse = document.createElement('div');
        mouse.style.cssText = "\n      display: none;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 10001;\n      width: " + this.radius * 2 + "px;\n      height: " + this.radius * 2 + "px;\n      border: 1px solid red;\n      border-radius: 100%;\n    ";
        this.mouse = mouse;
        body.appendChild(mouse);
        var mouseMove = (function (e) {
            var _a = [e.pageX, e.pageY], x = _a[0], y = _a[1];
            var isOnCanvas = _this.isOnCanvas(x, y);
            mouse.style.transform = "translate(" + (x - _this.radius - 1) + "px, " + (y - _this.radius - 1) + "px)"; // minus border width of mouse type
            if (!isOnCanvas) {
                mouse.style.display = 'none';
                body.style.cursor = 'default';
            }
            else {
                mouse.style.display = 'block';
                body.style.cursor = 'none';
            }
        }).bind(this);
        // change mouse style
        if (!this.isMobile) {
            win.addEventListener('mousemove', mouseMove, false);
            this.bindedEvents.push([win, 'mousemove', mouseMove]);
        }
        else {
            win.addEventListener('touchmove', mouseMove, false);
            this.bindedEvents.push([win, 'touchmove', mouseMove]);
        }
    };
    PhotoCover.prototype.setRadius = function (radius) {
        if (radius < 2 || radius > 100) {
            return;
        }
        this.radius = radius;
        var mouse = this.mouse;
        if (mouse) {
            mouse.style.width = radius * 2 + 'px';
            mouse.style.height = radius * 2 + 'px';
        }
    };
    PhotoCover.prototype.zoomIn = function (radius) {
        if (radius === void 0) { radius = 2; }
        this.setRadius(this.radius + radius);
    };
    PhotoCover.prototype.zoomOut = function (radius) {
        if (radius === void 0) { radius = 2; }
        this.setRadius(this.radius - radius);
    };
    PhotoCover.prototype.lineTo = function (x, y) {
        var ctx = this.ctx;
        ctx.lineCap = this.lineCap;
        ctx.lineJoin = 'round';
        ctx.strokeStyle = this.color;
        ctx.lineWidth = this.radius * 2;
        ctx.lineTo(x, y);
        ctx.stroke();
    };
    PhotoCover.prototype.drawCircle = function (x, y, radius) {
        var ctx = this.ctx;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(x + 1, y + 1, radius || this.radius, 0, 360);
        ctx.fill();
        ctx.closePath();
        return [MouseType.PEN, this.color, x, y, this.radius];
    };
    PhotoCover.prototype.drawLine = function (x, y) {
        this.ctx.globalCompositeOperation = 'source-over';
        this.lineCap = 'round';
        this.lineJoin = 'round';
        this.lineTo(x, y);
        return [MouseType.PEN, this.color, x, y, this.radius];
    };
    PhotoCover.prototype.erase = function (x, y) {
        this.ctx.globalCompositeOperation = 'destination-out';
        this.lineCap = 'round';
        this.lineJoin = 'round';
        this.lineTo(x, y);
        return [MouseType.ERASER, x, y, this.radius];
    };
    PhotoCover.prototype.drawByEvent = function (event) {
        var _a = this.getCoordinateByEvent(event), x = _a[0], y = _a[1];
        if (this.mouseType === MouseType.PEN) {
            return this.drawLine(x, y);
        }
        else if (this.mouseType === MouseType.ERASER) {
            return this.erase(x, y);
        }
        else {
            return [];
        }
    };
    PhotoCover.prototype.getCoordinateByEvent = function (event) {
        var x, y;
        if (this.isMobile) {
            event = event.changedTouches[0];
        }
        x = event.pageX - this.canvas.offsetLeft;
        y = event.pageY - this.canvas.offsetTop;
        return [x, y];
    };
    PhotoCover.prototype.isOnCanvas = function (pageX, pageY) {
        if (pageX < this.img.offsetLeft ||
            pageX > (this.img.offsetLeft + this.img.width) ||
            pageY < this.img.offsetTop ||
            pageY > (this.img.offsetTop + this.img.height)) {
            return false;
        }
        return true;
    };
    PhotoCover.prototype.setMaxWidth = function (width) {
        this.maxWidth = width;
    };
    PhotoCover.prototype.setColor = function (color) {
        this.color = color;
    };
    /**
     * set tool as mouse type
     * @param tool MouseType
     */
    PhotoCover.prototype.setTool = function (tool) {
        this.mouseType = tool;
        if (tool === MouseType.PEN) {
            this.setPen();
        }
        else if (tool === MouseType.ERASER) {
            this.setEraser();
        }
    };
    PhotoCover.prototype.setPen = function () {
        if (this.mouse) {
            Object.assign(this.mouse.style, {
                borderRadius: '100%',
                border: "1px solid " + PhotoCover.DEFAULT_PEN_BORDER_COLOR
            });
        }
        this.mouseType = MouseType.PEN;
    };
    PhotoCover.prototype.setEraser = function () {
        if (this.mouse) {
            Object.assign(this.mouse.style, {
                borderRadius: '100%',
                border: "1px dashed " + PhotoCover.DEFAULT_ERASER_BORDER_COLOR
            });
        }
        this.mouseType = MouseType.ERASER;
    };
    PhotoCover.prototype.undo = function () {
        var _this = this;
        var ctx = this.ctx;
        var color = this.color;
        ctx.save();
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.histories.pop();
        this.histories.map(function (steps) {
            steps.map(function (step) {
                if (step[0] === MouseType.PEN) {
                    _this.color = step[1];
                    _this.setRadius(step[4]);
                    _this.drawLine(step[2], step[3]);
                }
                else if (step[0] === MouseType.ERASER) {
                    _this.setRadius(step[3]);
                    _this.erase(step[1], step[2]);
                }
                else if (step[0] === 'MOVE_TO') {
                    ctx.beginPath();
                    ctx.moveTo.apply(ctx, step.slice(1));
                }
            });
        });
        this.color = color;
        ctx.restore();
    };
    /**
     * get image origin size
     * @param  {String}   src      iamge source url
     * @param  {Function} callback callback function, width as first parameter and height as second
     * @return {undefined}
     */
    PhotoCover.prototype.getImageOriginSize = function (src, callback) {
        var img = new Image();
        img.onload = function () {
            var width = img.width;
            var height = img.height;
            callback && callback(width, height);
        };
        img.src = src;
    };
    PhotoCover.prototype.getDataURL = function (type, quality, callback) {
        var _this = this;
        if (type === void 0) { type = 'image/jpeg'; }
        if (quality === void 0) { quality = 0.8; }
        var src = this.img.src;
        this.getImageOriginSize(src, function (width, height) {
            var tempCanvas = document.createElement('canvas');
            tempCanvas.width = width;
            tempCanvas.height = height;
            var tempCtx = tempCanvas.getContext('2d');
            if (tempCtx) {
                tempCtx.drawImage(_this.img, 0, 0, width, height);
                tempCtx.drawImage(_this.canvas, 0, 0, width, height);
                callback && callback(tempCanvas.toDataURL(type, quality));
            }
        });
    };
    /**
     * remove dom that added into body,
     * remove all events that registered
     */
    PhotoCover.prototype.destroy = function () {
        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
        this.mouse.parentNode && this.mouse.parentNode.removeChild(this.mouse);
        this.img.src = '';
        this.bindedEvents.forEach(function (v) {
            v[0].removeEventListener(v[1], v[2], false);
        });
        // delete this
    };
    PhotoCover.DEFAULT_RADIUS = 20;
    PhotoCover.DEFAULT_MAX_WIDTH = 800;
    PhotoCover.DEFAULT_COLOR = 'black';
    PhotoCover.DEFAULT_PEN_BORDER_COLOR = 'red';
    PhotoCover.DEFAULT_ERASER_BORDER_COLOR = '#666';
    PhotoCover.DEFAULT_LINECAP = 'round';
    PhotoCover.DEFAULT_LINEJOIN = 'round';
    return PhotoCover;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
